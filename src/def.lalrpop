
use crate::recipe::Rule;
use std::path::PathBuf;

grammar();

match {
    r"\s*" => { },                                                                 // Skip whitespace
    r"/\*(([^*/]|\n)|(\*+([^*/]|\n)|/([^*/]|\n)*|/\*([^*/]|\n)*))*\**\*/" => { },  // Skip multi-line comments
    r"(//|#)[^\n\r]*[\n\r]*" => { },                                               // Skip single-line comments
    _
}

Delimit<T, U>: Vec<T> = {
    <vec:(<T> <U>)*> <last: T?> => {
        let mut vec: Vec<_> = vec.into_iter().map(|x| x.0).collect();
        vec.extend(last.into_iter());
        vec
    }
};

pub Def: Option<Rule> = {
    Rule => Some(<>),
    => None,
};

Rule: Rule = {
    <outputs: Ident+> ":" <steps: Delimit<Deps, "|">> => {
        Rule { outputs, steps }
    },
};

Deps: Vec<String> = {
    <Ident+> => <>,
};

Path: PathBuf = {
    Ident => PathBuf::from(<>),
}

Ident: String = {
    r"[a-zA-Z_0-9\./]+" => String::from(<>),
};
