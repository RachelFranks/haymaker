
use crate::ast::ShellNode;

grammar();

match {
    r"\s*" => { },                                                                 // Skip whitespace
    r"/\*(([^*/]|\n)|(\*+([^*/]|\n)|/([^*/]|\n)*|/\*([^*/]|\n)*))*\**\*/" => { },  // Skip multi-line comments
    r"(//|#)[^\n\r]*[\n\r]*" => { },                                               // Skip single-line comments
    _
}

Delimit<T, U>: Vec<T> = {
    <first: T> <mut others:(<U> <T>)*> => {
        let mut vec = vec![first];
        vec.extend(others.into_iter().map(|x| x.1));
        vec
    }
};

pub Shell: ShellNode = {
    Exprs => ShellNode::Root(<>),
};

Exprs: Vec<ShellNode> = {
    <Expr*> => <>,
}

Expr: ShellNode = {
    "@@(" <SubCall> ")" => ShellNode::Subcall(<>, true),
    "@(" <SubCall> ")" => ShellNode::Subcall(<>, false),
    "@()" => ShellNode::Text(String::new()),
    "@" <t: Text> => ShellNode::Expand(t.to_owned()),
    <t: Text> => ShellNode::Text(t.to_owned()),
};

SubCall: Vec<ShellNode> = {
    <first: Exprs> <others:("|" Exprs)*> => {
        let mut vec = vec![first];
        vec.extend(others.into_iter().map(|x| x.1));
        vec
    }
    //<Delimit<Exprs, "|">> => <>,
};

Text: &'input str = {
    r"([^@|()]+)" => <>,
};
